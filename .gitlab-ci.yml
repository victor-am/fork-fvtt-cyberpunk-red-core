default:
  image: node:latest

cache:
  paths:
    - node_modules/

variables:
  SYSTEM_NAME: "cyberpunk-red-core"

stages:
  - init
  - test-the-tests
  - test
  - build
  - release

init:
  stage: init
  script:
    - echo "Installing dependencies..."
    - npm install

lint:
  stage: test
  script:
    - echo "Linting code..."
    - npm run lint

unit-test:
  stage: test
  script:
    - echo "Executing tests..."
    - npm test

who-watches-the-watchmen:
  stage: test-the-tests
  before_script:
    - apt-get update
    - apt-get install shellcheck
  script:
    - echo "Yo Dawg I heard you like tests so I wrote a test to test your tests..."
    - ./.gitlab/pipeline_tests/test-tests.sh
  only:
    changes:
      - "**/*.sh"

language-unused-strings:
  stage: test
  script:
    - echo "Checking language file for unused strings..."
    - ./.gitlab/pipeline_tests/test-lang-file.sh

language-exists:
  stage: test
  before_script:
    - apt-get update
    - apt-get install jq --yes
  script:
    - echo "Checking if all the language files specified in system.json exist..."
    - ./.gitlab/pipeline_tests/test-lang-existence.sh

changelog-has-changed:
  stage: test
  script:
    - echo "Checking if the CHANGELOG.md changed..."
    - git fetch origin dev
    - ./.gitlab/pipeline_tests/test-changelog-dev-changed.sh
  allow_failure: true
  except:
    - master
    - dev

trace-statements:
  stage: test
  script:
    - echo "Checking if there are proper trace statements in all hbs files..."
    - ./.gitlab/pipeline_tests/test-hbs-trace.sh

code-localization:
  stage: test
  script:
    - echo "Checking if our own localization and notification code is used..."
    - ./.gitlab/pipeline_tests/test-misc.sh

handlebars-helpers:
  stage: test
  script:
  - echo "Checking use of handlebars helpers..."
  - ./.gitlab/pipeline_tests/test-handlebars-helpers.sh

# Build without artifacts when not tagging a release
test-build:
  stage: build
  except:
    - tags
  script:
    - echo "Building cyberpunk-red-core..."
    - npm run build

# Builds and Uploads artifacts the gitlab generic repo
build-artifacts:
  stage: build
  only:
    - tags
  before_script:
    - apt-get update
    - apt-get install curl zip jq -y
  script:
    - echo "Building cyberpunk-red-core..."
    #- ./.gitlab/pipeline_tests/pre-release-checks.sh
    - ./.gitlab/pipeline_utils/build.sh
  artifacts:
    expire_in: 1h
    reports:
      dotenv: build.env

# Creates a GitLab release with the previously uploaded artifacts
create-release:
  stage: build
  only:
    - tags
  needs:
    - job: build-artifacts
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install curl jq -y
    - curl --silent --location --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
  script:
    - echo "Running Release Job..."
    - ./.gitlab/pipeline_utils/release.sh

# Build the `latest` system.json and upload to gitlab generic repo
# This makes the release available in Foundry (I think?)
publish:
  stage: release
  only:
    - tags
  needs:
    - job: create-release
    - job: build-artifacts
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install curl jq -y
  script:
    - echo "Releasing cyberpunk-red-core..."
    - ./.gitlab/pipeline_utils/publish.sh
