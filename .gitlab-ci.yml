default:
  image: node:latest

cache:
  paths:
    - node_modules/

stages:
  - init
  - build
  - test
  - pre-release
  - release

init:
  stage: init
  script:
    - echo "Installing dependencies..."
    - npm i

build-css:
  stage: build
  script:
    - echo "Building CSS..."
    - npm run build:css

lint:
  stage: test
  script:
    - echo "Linting code..."
    - npm run lint

unit-test:
  stage: test
  script:
    - echo "Executing tests..."
    - npm test

lang-test:
  stage: test
  script:
    - echo "Checking language file for unused strings..."
    - ./.gitlab/pipeline_tests/test-lang-file.sh

changelog-dev-test:
  stage: test
  script:
    - echo "Checking if the CHANGELOG.md changed..."
    - ./.gitlab/pipeline_tests/test-changelog-dev-changed.sh
  allow_failure: true
  except:
    - master
    - dev

main-css-test:
  stage: test
  script:
    - echo "Ensuring a compiled main.css exists if less files changed..."
    - ./.gitlab/pipeline_tests/test-main-css.sh

code-test 1/2:
  stage: test
  script:
    - echo "Checking if there are proper trace statements in all hbs files..."
    - ./.gitlab/pipeline_tests/test-hbs-trace.sh

code-test 2/2:
  stage: test
  script:
    - echo "Checking if our own localization and notification code is used..."
    - ./.gitlab/pipeline_tests/test-misc.sh

helper-test:
  stage: test
  script:
  - echo "Checking use of handlebars helpers..."
  - ./.gitlab/pipeline_tests/test-handlebars-helpers.sh

pack-alpha-sort-test:
  stage: test
  before_script:
    - apt-get update
    - apt-get install jq --yes
  script:
    - echo "Checking if packs are sorted alphabetically"
    - ./.gitlab/pipeline_tests/test-pack-alpha-sort.sh

pre-release:
  stage: pre-release
  before_script:
    - 'apt-get update'
    - 'apt-get install jq -y'
  rules: 
    - if: '$CI_COMMIT_BRANCH == "dev"'
  allow_failure: true
  script:
    - echo "Checking if Dev is suitable for release to Master..."
    - ./.gitlab/pipeline_tests/pre-release-checks.sh

release:
  stage: release
  rules: 
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
  script:
    - echo "Running the release job"
    - MASTER_VERSION=$(grep version system.json | awk '{print $2}' | sed 's/^.//;s/..$//')
    - > 
      curl --header "Content-Type: application/json" --header "JOB-TOKEN: $CI_JOB_TOKEN" --data "{\"name\": \"v$MASTER_VERSION\", \"tag_name\": \"v$MASTER_VERSION\", \"description\": \"Automated release of v$MASTER_VERSION\", \"ref\": \"$CI_COMMIT_SHA\" }" --request POST "https://gitlab.com/api/v4/projects/22820629/releases"
