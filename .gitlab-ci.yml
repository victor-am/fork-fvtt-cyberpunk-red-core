default:
  image: node:latest

cache:
  paths:
    - node_modules/

stages:
  - init
  - test
  - build
  - pre-release
  - release

init:
  stage: init
  script:
    - echo "Installing dependencies..."
    - npm install

lint:
  stage: test
  script:
    - echo "Linting code..."
    - npm run lint

unit-test:
  stage: test
  script:
    - echo "Executing tests..."
    - npm test

lang-test 1/2:
  stage: test
  script:
    - echo "Checking language file for unused strings..."
    - ./.gitlab/pipeline_tests/test-lang-file.sh

lang-test 2/2:
  stage: test
  before_script:
    - apt-get update
    - apt-get install jq --yes
  script:
    - echo "Checking if all the language files specified in system.json exist..."
    - ./.gitlab/pipeline_tests/test-lang-existence.sh

changelog-dev-test:
  stage: test
  script:
    - echo "Checking if the CHANGELOG.md changed..."
    - ./.gitlab/pipeline_tests/test-changelog-dev-changed.sh
  allow_failure: true
  except:
    - master
    - dev

code-test 1/2:
  stage: test
  script:
    - echo "Checking if there are proper trace statements in all hbs files..."
    - ./.gitlab/pipeline_tests/test-hbs-trace.sh

code-test 2/2:
  stage: test
  script:
    - echo "Checking if our own localization and notification code is used..."
    - ./.gitlab/pipeline_tests/test-misc.sh

helper-test:
  stage: test
  script:
  - echo "Checking use of handlebars helpers..."
  - ./.gitlab/pipeline_tests/test-handlebars-helpers.sh

pack-alpha-sort-test:
  stage: test
  before_script:
    - apt-get update
    - apt-get install jq --yes
  script:
    - echo "Checking if packs are sorted alphabetically"
    - ./.gitlab/pipeline_tests/test-pack-alpha-sort.sh

build:
  stage: build
  only:
    - tags
  before_script:
    - apt-get update
    - apt-get install zip
  script:
    - echo "Building cyberpunk-red-core..."
    - echo CPR_JOB_ID=${CI_JOB_ID} >> build.env
    - npm run build
    - cp dist/system.json system.json
    - mv dist cyberpunk-core-red-${CI_COMMIT_TAG}
    - zip cpr.zip -r cyberpunk-core-red-${CI_COMMIT_TAG}
  artifacts:
    expire_in: never
    reports:
      dotenv: build.env
    paths:
      - cpr.zip
      - system.json

pre-release:
  stage: pre-release
  before_script:
    - 'apt-get update'
    - 'apt-get install jq -y'
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  allow_failure: true
  script:
    - echo "Checking if Dev is suitable for release to Master..."
    - ./.gitlab/pipeline_tests/pre-release-checks.sh

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Running Release Job..."
  needs:
    - job: build
      artifacts: true
  before_script:
    - curl -L --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
  release:
    name: "$CI_COMMIT_TAG"
    description: "Automated release of $CI_COMMIT_TAG"
    tag_name: $CI_COMMIT_TAG
    assets:
      links:
        - name: "system.json"
          url: https://gitlab.com/ryanwalder/cpr-test/-/jobs/${CPR_JOB_ID}/artifacts/file/system.json
        - name: "cpr.zip"
          url: https://gitlab.com/ryanwalder/cpr-test/-/jobs/${CPR_JOB_ID}/artifacts/file/cpr.zip
